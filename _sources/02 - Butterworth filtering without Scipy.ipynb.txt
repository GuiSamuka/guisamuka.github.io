{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"02 - Butterworth filtering without Scipy.ipynb","provenance":[],"collapsed_sections":["yhxCKypmkSrP"],"toc_visible":true,"mount_file_id":"1tNY0INBm6Tze3feJtUBGDETd-4X73FBj","authorship_tag":"ABX9TyNuXP8du9KMge43WoZM3dZn"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"c3q5TPBpizak"},"source":["# Reading the data\n","\n"]},{"cell_type":"code","metadata":{"id":"R0SCdWGDiam1"},"source":["import pandas as pd\n","\n","import plotly.express as px\n","import plotly.graph_objs as go"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KeIroFMji6U1"},"source":["FILE_PATH = '/content/drive/MyDrive/01 - Iniciação Científica/02 - Datasets/csv_files/EN2_STAR_MON_0100725706_20070516T060226_20071005T074409.csv'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"ZyK4DqFtjDV6","executionInfo":{"status":"ok","timestamp":1616504751385,"user_tz":180,"elapsed":1114,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"50a0f7c1-92c0-4af2-824c-2c3fcfe4a249"},"source":["df = pd.read_csv(FILE_PATH)\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>DATE</th>\n","      <th>WHITEFLUX</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2007-05-16 18:11:00.787644</td>\n","      <td>75564.110</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2007-05-16 18:19:32.829687</td>\n","      <td>75574.570</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2007-05-16 18:28:04.871730</td>\n","      <td>75547.414</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2007-05-16 18:36:36.913772</td>\n","      <td>75688.330</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2007-05-16 18:45:08.955815</td>\n","      <td>75712.540</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                         DATE  WHITEFLUX\n","0  2007-05-16 18:11:00.787644  75564.110\n","1  2007-05-16 18:19:32.829687  75574.570\n","2  2007-05-16 18:28:04.871730  75547.414\n","3  2007-05-16 18:36:36.913772  75688.330\n","4  2007-05-16 18:45:08.955815  75712.540"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"qWf_alVojJdK"},"source":["import numpy as np\n","\n","x = df.DATE.to_numpy()\n","y = df.WHITEFLUX.to_numpy()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3yHG6S7XnUWv"},"source":["# Mathematical Requirements\n","\n","## Discrete-time Fourier transform (DTFT)\n","\n","$$  X[k] = X(\\omega_k) = \\sum_{n=0}^{L-1} x[n]e^{-j2\\pi \\frac{k}{N}n}  $$\n","\n","If $N \\ge L$, then:\n","\n","$$  X[k] = \\sum_{n=0}^{N-1} x[n]e^{-j2\\pi \\frac{k}{N}n}  $$\n","\n","## Convolution\n","\n","$$  f(t) * g(t) = (f*g)(t) \\triangleq \\int_{-\\infty}^{\\infty} f(\\tau) g(t - \\tau) d\\tau $$\n","\n","### Convolution theorem\n","\n","Taking the Fourier transform of $f(t) * g(t)$, we have:\n","\n","$$ \\mathcal{F}\\{ f(t) * g(t) \\} = \\int_{-\\infty}^{\\infty} \\Bigg[ \\int_{-\\infty}^{\\infty} f(\\tau) g(t - \\tau) d\\tau \\Bigg]e^{-j2\\pi\\mu t}dt \\\\ $$\n","\n","$$ \\mathcal{F}\\{ f(t) * g(t) \\} = \\int_{-\\infty}^{\\infty} f(\\tau) \\Bigg[ \\int_{-\\infty}^{\\infty} g(t - \\tau)e^{-j2\\pi\\mu t}dt \\Bigg]d\\tau \\\\ $$\n","\n","$$ ... demonstration \\\\ $$\n","\n","$$ f(t) * g(t) \\iff G(\\mu)F(\\mu) \\\\ $$ \n","\n","\n","The double arrow means that the expression on the right side is obtained by taking the Fourier transform of the expression on the left, as well as, the expression on the left was obtained by taking the inverse Fourier transform of the expression on the right.\n"]},{"cell_type":"markdown","metadata":{"id":"l4uGNIOJjFeq"},"source":["# Frequency Domain Filtering Fundamentals\n","\n","---\n","\n","## Introduction\n","Filtering in the frequency domain consists of modifying the Fourier transform of an signal (can be a image, a media file, a light curve...) and then computing the inverse tranform to obtained the processed result. Thus, given a digital signal, $f(x)$, of size $M$, the basic filtering equation is: \n","\n","$$\n","g(x) = \\mathcal{F}^{-1}[H(u)F(u)] \\\\\n","$$\n","\n","where $\\mathcal{F}^{-1}$ is the Inverse discrete Fourier transform, $F(u)$ is the Fourier transform of the given function $f(x)$ (input), $H(u)$ is the _filter transfer function_, and $g(x)$ is the filtered signal (output). Both $F$, $H$ and $G$ are arrays of size $M$, the same as the input signal. The product $H(u)F(u)$ is formed using array multiplication; that is, $G(i, k)=H(i, k)F(i, k)$.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"8w6Ankjbjgd-"},"source":["## Expand lightcurves borders\n","\n"]},{"cell_type":"code","metadata":{"id":"GqpJZKA2jD5j"},"source":["def artifical_borders(array, num):\n","  aux_pre = np.zeros(num)\n","  aux_pos = np.zeros(num)\n","  i = 0\n","  for i in range(num):\n","    aux_pre[i] = array[0]\n","    aux_pos[i] = array[-1]\n","  \n","  return np.concatenate((aux_pre, array, aux_pos)).ravel()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NBhnfl2ijOmD"},"source":["# Defining the numbers of points to be added\n","\n","param = 70"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_JqgOnU-jPYx","executionInfo":{"status":"ok","timestamp":1616504751387,"user_tz":180,"elapsed":1099,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"71dba08a-e637-4634-b9e8-b16e7387328f"},"source":["y_artifical_borders = artifical_borders(y, param)\n","\n","print(\"The original length was:\", len(y), \", and now we have:\", len(y_artifical_borders), \"\\nThe difference is:\", (len(y_artifical_borders) - len(y) ))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The original length was: 23952 , and now we have: 24092 \n","The difference is: 140\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"rcKHspTsjg58"},"source":["## Avoiding _wraparound_ error\n","\n","Zero Padding, $f_{zp}$, has the following definition: \n","\n","$$ f_{zp}(x) \\triangleq \\begin{cases}\n","   f(x), &\\text{if } |m| < N/2 \\\\\n","   0, &\\text{otherwise }\n","\\end{cases} $$\n","\n","where: \n","\n","$m = 0, \\pm1, \\pm2, \\pm3, ...\\pm M_{h}$, with $M_h \\triangleq (M-1)/2 $ for $M$ odd, and $M/2-1$ for $M$ even. \n","\n","<br />Padding remove the implicit periodicity of the funcion that can appeared on the filtered data.\n","In other terms, the padding prevents the convolution of two functions from generating unexpected (periodic) results."]},{"cell_type":"code","metadata":{"id":"kYsXoH4hjioE"},"source":["def padding(array):\n","  return np.append(array, np.zeros(len(array)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"neKUMFHVjjMS","executionInfo":{"status":"ok","timestamp":1616504751610,"user_tz":180,"elapsed":1312,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"3085249b-2694-4cf5-cc01-0d8dac752801"},"source":["y_padding = padding(y_artifical_borders)\n","\n","print(\"The previous length was:\", len(y_artifical_borders), \", and now we have:\", len(y_padding), \"\\nThe difference is:\", (len(y_padding) - len(y_artifical_borders) ))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The previous length was: 24092 , and now we have: 48184 \n","The difference is: 24092\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EHh_YpdujoYf"},"source":["## Centering the transform\n","\n","Specification of $H(u)$ is simplified considerably by using functions that are symmetric about their center, which requires that $F(u)$ be centered also. This is accomplished by multipying the input signal, $f(x)$, by $(-1)^{x}$, where $x$ is the array index, prior to computing its Fourier transform. "]},{"cell_type":"code","metadata":{"id":"A93brM-8kBuv"},"source":["def multiplying_by_minus_one_to_index(array):\n","  i = 0\n","  new_array = np.ones(len(array))\n","\n","  for i in range(len(array)):\n","    new_array[i] = array[i] * ( (-1)**(i) )\n","  \n","  return new_array"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4rxcxQFOkLGm"},"source":["y_multiplied = multiplying_by_minus_one_to_index(y_padding)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yhxCKypmkSrP"},"source":["## Fourier Transform\n","\n","$$ \\mathcal{F}\\{f(\\xi)\\} = \\hat{f}(\\xi) \\triangleq \\int_{-\\infty}^{\\infty} f(\\xi)\\space e^{-j2\\pi\\mu \\xi}d\\xi \\\\ $$\n","\n","where $\\xi$ is any real number, "]},{"cell_type":"code","metadata":{"id":"K6dZBOBAkURt"},"source":["def fourier_transform(array):\n","  fft = np.fft.fft(array)\n","  \n","  return fft"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QW2s5o6hkWlE"},"source":["y_fft = fourier_transform(y_multiplied)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NAviyim_L_QR","executionInfo":{"status":"ok","timestamp":1616504751613,"user_tz":180,"elapsed":1300,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"5800a030-3d12-4c9e-c470-30ad0a247a8b"},"source":["y_fft"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-16673.57200001+8.36371328e-09j,  47796.28989974+1.23804272e+04j,\n","         1859.81772268+2.77695961e+04j, ...,\n","        79054.83095289-8.48836152e+03j,   1859.81772268-2.77695961e+04j,\n","        47796.28989975-1.23804272e+04j])"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"cviBJHtckYbY"},"source":["## Butterworth transfer function\n","\n","$$ G_{n}(\\omega)  = |H_{n}(j\\space\\omega)| = \\frac{1}{ \\sqrt{ 1 + \\big(\\frac{\\omega}{\\omega_c}\\big)^{2n} } } \\\\ $$\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"va-SSTAB3Wpd"},"source":["nyquist = 0.5 < x < 0.01 muito ruim\n","\n","ordem = 3 e 4 podem alterar o resultado, deve ser menor (talvez)"]},{"cell_type":"code","metadata":{"id":"Q2gCpWjfktHv"},"source":["cutoff_freq = 0.2 # Nyquist\n","order = 2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qy7ahn_Nkxq6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616504751613,"user_tz":180,"elapsed":1291,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"fede63a2-b03e-4aa6-b9a8-d3ff5c151f76"},"source":["(n_time, columns) = df.shape\n","n_time"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["23952"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"YjQDJF1xky--"},"source":["d0 = cutoff_freq * n_time\n","xc = n_time"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n6p7erprky5l","executionInfo":{"status":"ok","timestamp":1616504751614,"user_tz":180,"elapsed":1282,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"e6ab5142-93fb-40e1-cdfa-6f4d5ee8cb0b"},"source":["filter = np.zeros(int(2*(n_time + 2*param)))\n","len(filter)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["48184"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"XWuNk1uok-4Q"},"source":["### Creating a filter array\n"]},{"cell_type":"code","metadata":{"id":"w2YBpNgcG-MH"},"source":["for i in range(int(2.0*n_time + param)):\n","   filter[i] = 1.0/ (1.0+(abs(i-(xc-1.0))/d0)**(2.0*order))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4eWq1YZ0Vwxr","executionInfo":{"status":"ok","timestamp":1616504751845,"user_tz":180,"elapsed":1503,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"7331e200-9c14-48f0-e786-d3290fe6bc68"},"source":["filter"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.00159771, 0.00159798, 0.00159824, ..., 0.        , 0.        ,\n","       0.        ])"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"i-bpyY_lk9X_"},"source":["### Applying the filter -> Array product\n","\n","Consider the following 2x2 matrices:\n","\n","$$\n","\\begin{bmatrix}\n","  a_{11} & a_{12} \\\\ a_{21} & a_{22}\n","\\end{bmatrix} \\kern1em and \\kern1em\n","\\begin{bmatrix}\n","  b_{11} & b_{12} \\\\ b_{21} & b_{22}\n","\\end{bmatrix}\n","$$\n","\n","The array product is defined by\n","\n","$$\n","\\begin{bmatrix}\n","  a_{11} & a_{12} \\\\ a_{21} & a_{22}\n","\\end{bmatrix}\n","\\begin{bmatrix}\n","  b_{11} & b_{12} \\\\ b_{21} & b_{22}\n","\\end{bmatrix} = \n","\\begin{bmatrix}\n","  a_{11}b_{11} & a_{12}b_{12} \\\\ a_{21}b_{21} & a_{22}b_{22}\n","\\end{bmatrix}\n","$$\n"]},{"cell_type":"code","metadata":{"id":"pMHd5ptwk-hF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616504751846,"user_tz":180,"elapsed":1496,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"afbd015c-6531-4301-c7c1-577e3fac95f6"},"source":["y_butter = filter * y_fft\n","y_butter"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-26.63954048+1.33627922e-11j,  76.377367  +1.97836366e+01j,\n","         2.97244137+4.43825733e+01j, ...,   0.        +0.00000000e+00j,\n","         0.        +0.00000000e+00j,   0.        +0.00000000e+00j])"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"fU61GckYlF3y"},"source":["## Inverse Fourier Transform\n","\n","$$ f(x) = \\int_{-\\infty}^{\\infty}\\mathcal{F}(\\xi)\\space e^{j2\\pi x\\xi} d\\xi \\\\ $$\n","\n","where $x$ is any real number, "]},{"cell_type":"code","metadata":{"id":"WOxNcT-mlLlh"},"source":["def inverse_fourier_transform(array):\n","  ifft = np.fft.ifft(array)\n","\n","  return ifft"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UYzS22fDlPh2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616504751847,"user_tz":180,"elapsed":1486,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"1def5157-6e76-434d-c240-78460c1d4cfa"},"source":["y_ifft = np.real(inverse_fourier_transform(y_butter))\n","y_ifft"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 46106.38618151, -60407.84594294,  70102.40591138, ...,\n","        -5461.64743604,  15156.20730318, -29457.6671153 ])"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"KPSIPZKhlXTc"},"source":["## Removing Zero Padding"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bw9r52pElY9T","executionInfo":{"status":"ok","timestamp":1616504751847,"user_tz":180,"elapsed":1479,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"774bb938-5241-47e3-be63-e5d54841a62b"},"source":["y1 = y_ifft[:int(len(y_ifft)/2)]\n","\n","print(\"The before length was:\", len(y_ifft), \", and now we have:\", len(y1))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The before length was: 48184 , and now we have: 24092\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WLMC1eO7NlRD","executionInfo":{"status":"ok","timestamp":1616504751847,"user_tz":180,"elapsed":1473,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"22a17617-7d53-4594-e265-634ed85d534e"},"source":["y1"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 46106.38618151, -60407.84594294,  70102.40591138, ...,\n","       -70754.45328098,  60969.72307444, -46535.23777034])"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"CuDyzm3OlhBj"},"source":["## Cuting artificial borders"]},{"cell_type":"code","metadata":{"id":"ITfHyz2klh77"},"source":["param = param # equals 70, but we might change that value"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_auuwvhXljW6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616504751848,"user_tz":180,"elapsed":1466,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"434363eb-c770-4324-8c43-7a23a0b0b8d7"},"source":["y2 = np.delete(y1, np.s_[:param])\n","y3 = np.delete(y2, np.s_[-param:])\n","\n","y3"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 75576.34518548, -75593.06708911,  75615.50871701, ...,\n","       -76233.54926403,  76241.75815325, -76251.19480945])"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"markdown","metadata":{"id":"9Bna41e7lRU7"},"source":["## Re-multiplying data by $(-1)^{i}$"]},{"cell_type":"code","metadata":{"id":"dcKGVpG6lWQ2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616504751849,"user_tz":180,"elapsed":1461,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"e96ac2f2-4f6b-4b38-ef4f-4ca18ad36222"},"source":["y_filtered = multiplying_by_minus_one_to_index(y3)\n","y_filtered"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([75576.34518548, 75593.06708911, 75615.50871701, ...,\n","       76233.54926403, 76241.75815325, 76251.19480945])"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"zDux-JVBlmzt"},"source":["## Results"]},{"cell_type":"code","metadata":{"id":"jtcsrQ3jlosU","colab":{"base_uri":"https://localhost:8080/","height":542,"output_embedded_package_id":"1PTLIXgi9ZWSdknyTMFf9oUu68j7d-oZR"},"executionInfo":{"status":"ok","timestamp":1616504774225,"user_tz":180,"elapsed":2712,"user":{"displayName":"Guilherme Samuel","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi5zFr3jUWJ1NdrUB6KSy3C4B0uR2RLqUiKRzi0S2M=s64","userId":"17398030156076443435"}},"outputId":"b97e86ea-2c31-47b9-d541-f89e3a3dece0"},"source":["fig = go.Figure()\n","\n","fig.add_trace(go.Scatter(x=x, y=y,\n","                           mode='lines',\n","                           name='Original Light Curve'))\n","\n","fig.add_trace(go.Scatter(x=x, y=y_filtered,\n","                           mode='lines',\n","                           name='Light Curve Filtered'))\n","\n","fig.update_layout(title='Light Curve before and after the Butterworth filter',\n","                   xaxis_title='Date',\n","                   yaxis_title='Whiteflux')\n","\n","fig.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}]}